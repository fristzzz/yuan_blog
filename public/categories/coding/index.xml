<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>coding on Yuan&#39;s Studio</title>
        <link>https://zzzzorange.netlify.com/categories/coding/</link>
        <description>Recent content in coding on Yuan&#39;s Studio</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 02 Mar 2023 18:47:21 +0000</lastBuildDate><atom:link href="https://zzzzorange.netlify.com/categories/coding/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>git notes</title>
        <link>https://zzzzorange.netlify.com/p/git-notes/</link>
        <pubDate>Thu, 02 Mar 2023 18:47:21 +0000</pubDate>
        
        <guid>https://zzzzorange.netlify.com/p/git-notes/</guid>
        <description>&lt;p&gt;以前没怎么用git，也就clone，push，add，commit这些，最近两个电脑同步笔记，要用不少git操作。发现以前看的全忘光了，再重新复习一下。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;分支内操作&#34;&gt;分支内操作&lt;/h1&gt;
&lt;h2 id=&#34;创建仓库-提交修改&#34;&gt;创建仓库, 提交修改&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git init&lt;/code&gt; 在当前目录创建仓库
&lt;code&gt;git init filename&lt;/code&gt; 在指定目录下创建仓库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt; 将修改添加到暂存区
&lt;code&gt;git status&lt;/code&gt; 可以查看仓库状态，git会告诉你暂存区有无修改正在等待提交
&lt;code&gt;git commit -m &amp;quot;some describe&amp;quot;&lt;/code&gt; 将暂存区的所有修改提交到分支，-m参数为日志内容，linux下用单引号，windows下用双引号&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;git status&lt;/code&gt;告诉你有文件被修改过，用&lt;code&gt;git diff&lt;/code&gt;可以查看修改内容。&lt;/p&gt;
&lt;h2 id=&#34;版本回退&#34;&gt;版本回退&lt;/h2&gt;
&lt;h3 id=&#34;回退&#34;&gt;回退&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; 可以查看提交日志(commitment log)
&lt;code&gt;git log --pretty=oneline&lt;/code&gt; 查看精简版，只有id和提交信息&lt;/p&gt;
&lt;p&gt;回退到上一个版本： &lt;code&gt;git reset --hard HEAD^&lt;/code&gt; 其中 &lt;code&gt;HEAD^&lt;/code&gt; 即上一个版本
上上个版本为 &lt;code&gt;HEAD^^&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;撤销回退&#34;&gt;撤销回退&lt;/h3&gt;
&lt;p&gt;如果回退之后想要撤销回退，使用 &lt;code&gt;git reflog&lt;/code&gt; 查看head记录
并用 &lt;code&gt;git reset --hard &amp;lt;id&amp;gt;&lt;/code&gt; 来回到之前的版本&lt;/p&gt;
&lt;h2 id=&#34;撤销修改&#34;&gt;撤销修改&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git checkout -- &amp;lt;filename&amp;gt;&lt;/code&gt; 可以丢弃工作区的修改&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果文件自修改后还没有被放到暂存区，撤销修改就回到和版本库一样的状态&lt;/li&gt;
&lt;li&gt;如果文件已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态
总之，就是让这个文件回到最近一次 &lt;code&gt;git commit&lt;/code&gt; 或者 &lt;code&gt;git add&lt;/code&gt; 的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git reset HEAD &amp;lt;filename&amp;gt;&lt;/code&gt; 可以把暂存区的修改回退到工作区， HEAD表示最新的版本&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;远程仓库&#34;&gt;远程仓库&lt;/h1&gt;
&lt;h2 id=&#34;创建秘钥&#34;&gt;创建秘钥&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;example@email.com&amp;quot;&lt;/code&gt;
默认目录：&lt;code&gt;~/.ssh/&lt;/code&gt;
其中 &lt;code&gt;id_rsa&lt;/code&gt; 是私钥， &lt;code&gt;id_rsa.pub&lt;/code&gt; 是公钥
打开github，添加ssh秘钥。复制 &lt;code&gt;id_rsa.pub&lt;/code&gt; 内容到key中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;添加完秘钥还不能push的，要把https:改成git:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;添加远程仓库&#34;&gt;添加远程仓库&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git remote add origin git@github.com:xxx/xxx.git&lt;/code&gt;
远程库的名字就是origin，这是git默认的叫法
&lt;code&gt;git push -u origin master&lt;/code&gt;
第一次推送加上-u参数可以把本地的master和远程的master分支关联起来，在以后的push或pull的时候就可以简化命令&lt;/p&gt;
&lt;h2 id=&#34;删除远程库&#34;&gt;删除远程库&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git remote rm &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;分支管理&#34;&gt;分支管理&lt;/h1&gt;
&lt;h2 id=&#34;创建与合并分支&#34;&gt;创建与合并分支&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git checkout -b dev&lt;/code&gt; 创建分支
-b 表示创建并切换，相当于&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch dev
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout dev
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt; 查看当前分支&lt;/p&gt;
&lt;p&gt;把dev上的修改合并到master上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git merge dev 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;git merge&lt;/code&gt; 用于合并指定分支到当前分支。
&lt;code&gt;git branch -d dev&lt;/code&gt; 删除分支&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git switch xxx&lt;/code&gt; 也可以切换分支
&lt;code&gt;git switch -c xxx&lt;/code&gt; 创建并切换&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log --graph&lt;/code&gt; 查看分支合并图&lt;/p&gt;
&lt;p&gt;合并分支时，加上 &lt;code&gt;--no-ff&lt;/code&gt; 参数就可以用普通模式合并，合并后的历史有分支，能看出曾经做过合并，而 &lt;code&gt;fast forward&lt;/code&gt; 合并就看不出来曾经做过合并。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
